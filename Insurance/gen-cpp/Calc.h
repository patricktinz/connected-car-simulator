/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calc_H
#define Calc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "calc_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CalcIf {
 public:
  virtual ~CalcIf() {}
  virtual void ping() = 0;
  virtual void carStatus(Result& _return, const std::string& carType, const std::string& numberPlate, const std::string& defaultValue) = 0;
};

class CalcIfFactory {
 public:
  typedef CalcIf Handler;

  virtual ~CalcIfFactory() {}

  virtual CalcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalcIf* /* handler */) = 0;
};

class CalcIfSingletonFactory : virtual public CalcIfFactory {
 public:
  CalcIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<CalcIf>& iface) : iface_(iface) {}
  virtual ~CalcIfSingletonFactory() {}

  virtual CalcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalcIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<CalcIf> iface_;
};

class CalcNull : virtual public CalcIf {
 public:
  virtual ~CalcNull() {}
  void ping() {
    return;
  }
  void carStatus(Result& /* _return */, const std::string& /* carType */, const std::string& /* numberPlate */, const std::string& /* defaultValue */) {
    return;
  }
};


class Calc_ping_args {
 public:

  Calc_ping_args(const Calc_ping_args&);
  Calc_ping_args& operator=(const Calc_ping_args&);
  Calc_ping_args() {
  }

  virtual ~Calc_ping_args() throw();

  bool operator == (const Calc_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calc_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calc_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calc_ping_pargs {
 public:


  virtual ~Calc_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calc_ping_result {
 public:

  Calc_ping_result(const Calc_ping_result&);
  Calc_ping_result& operator=(const Calc_ping_result&);
  Calc_ping_result() {
  }

  virtual ~Calc_ping_result() throw();

  bool operator == (const Calc_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calc_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calc_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calc_ping_presult {
 public:


  virtual ~Calc_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calc_carStatus_args__isset {
  _Calc_carStatus_args__isset() : carType(false), numberPlate(false), defaultValue(false) {}
  bool carType :1;
  bool numberPlate :1;
  bool defaultValue :1;
} _Calc_carStatus_args__isset;

class Calc_carStatus_args {
 public:

  Calc_carStatus_args(const Calc_carStatus_args&);
  Calc_carStatus_args& operator=(const Calc_carStatus_args&);
  Calc_carStatus_args() : carType(), numberPlate(), defaultValue() {
  }

  virtual ~Calc_carStatus_args() throw();
  std::string carType;
  std::string numberPlate;
  std::string defaultValue;

  _Calc_carStatus_args__isset __isset;

  void __set_carType(const std::string& val);

  void __set_numberPlate(const std::string& val);

  void __set_defaultValue(const std::string& val);

  bool operator == (const Calc_carStatus_args & rhs) const
  {
    if (!(carType == rhs.carType))
      return false;
    if (!(numberPlate == rhs.numberPlate))
      return false;
    if (!(defaultValue == rhs.defaultValue))
      return false;
    return true;
  }
  bool operator != (const Calc_carStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calc_carStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calc_carStatus_pargs {
 public:


  virtual ~Calc_carStatus_pargs() throw();
  const std::string* carType;
  const std::string* numberPlate;
  const std::string* defaultValue;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calc_carStatus_result__isset {
  _Calc_carStatus_result__isset() : success(false) {}
  bool success :1;
} _Calc_carStatus_result__isset;

class Calc_carStatus_result {
 public:

  Calc_carStatus_result(const Calc_carStatus_result&);
  Calc_carStatus_result& operator=(const Calc_carStatus_result&);
  Calc_carStatus_result() {
  }

  virtual ~Calc_carStatus_result() throw();
  Result success;

  _Calc_carStatus_result__isset __isset;

  void __set_success(const Result& val);

  bool operator == (const Calc_carStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calc_carStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calc_carStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calc_carStatus_presult__isset {
  _Calc_carStatus_presult__isset() : success(false) {}
  bool success :1;
} _Calc_carStatus_presult__isset;

class Calc_carStatus_presult {
 public:


  virtual ~Calc_carStatus_presult() throw();
  Result* success;

  _Calc_carStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalcClient : virtual public CalcIf {
 public:
  CalcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void carStatus(Result& _return, const std::string& carType, const std::string& numberPlate, const std::string& defaultValue);
  void send_carStatus(const std::string& carType, const std::string& numberPlate, const std::string& defaultValue);
  void recv_carStatus(Result& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<CalcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_carStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalcProcessor(::apache::thrift::stdcxx::shared_ptr<CalcIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &CalcProcessor::process_ping;
    processMap_["carStatus"] = &CalcProcessor::process_carStatus;
  }

  virtual ~CalcProcessor() {}
};

class CalcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalcProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< CalcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< CalcIfFactory > handlerFactory_;
};

class CalcMultiface : virtual public CalcIf {
 public:
  CalcMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<CalcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalcMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<CalcIf> > ifaces_;
  CalcMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<CalcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void carStatus(Result& _return, const std::string& carType, const std::string& numberPlate, const std::string& defaultValue) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->carStatus(_return, carType, numberPlate, defaultValue);
    }
    ifaces_[i]->carStatus(_return, carType, numberPlate, defaultValue);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalcConcurrentClient : virtual public CalcIf {
 public:
  CalcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void carStatus(Result& _return, const std::string& carType, const std::string& numberPlate, const std::string& defaultValue);
  int32_t send_carStatus(const std::string& carType, const std::string& numberPlate, const std::string& defaultValue);
  void recv_carStatus(Result& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
